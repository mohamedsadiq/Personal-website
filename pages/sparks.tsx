import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { motion, AnimatePresence } from "framer-motion";
import { useState, useEffect } from 'react';

interface SparkData {
  href: string;
  title: string;
  description: string;
  date: string;
  type: 'video' | 'image';
  src: string;
  mediaType?: string;
  blurSrc?: string;
  width?: number;
  height?: number;
}

const sparksData: SparkData[] = [
  {
    href: 'sparks/scroll',
    title: 'Scrolling',
    description: 'Widget Scrolling.',
    date: 'June - 2024',
    type: 'video',
    src: 'https://video.twimg.com/ext_tw_video/1801041108274757632/pu/vid/avc1/480x480/qbJ7cC1MrzCqk444.mp4?tag=12',
    mediaType: 'video/mp4'
  },
  {
    href: 'sparks/button',
    title: 'Button',
    description: 'An interactive button.',
    date: 'June - 2024',
    type: 'image',
    src: '/fffsfs.gif',
    blurSrc: '/',  // Placeholder image
    width: 100,
    height: 50
  },
];

const sparksData2: SparkData[] = [
  {
    href: 'sparks/onhover',
    title: 'On Hover',
    description: 'On hover interaction.',
    date: 'Jul - 2024',
    blurSrc: '/',  
    src: '/July 11 Screen Recording.gif',
    type: 'image',
    width: 100,
    height: 100
  },
  {
    href: 'sparks/TheMartian',
    title: 'The Martian',
    description: 'A character on Mars.',
    date: 'Jul - 2024',
    type: 'image',
    blurSrc: '/',  
    src: '/martin.gif',
    width: 100,
    height: 100
  },
  {
    href: 'sparks/gameui',
    title: '3D interactive ',
    description: 'Smooth transitions.',
    date: 'Jul - 2024',
    type: 'video',
    src: '/July 10 Screen Recording.mp4',
    mediaType: 'video/mp4'
  },
];

const sparksData3: SparkData[] = [
  {
    href: 'sparks/line',
    title: 'Temporal Flow',
    description: 'Enhancing the ux of a timeline',
    date: 'Jul - 2024',
    blurSrc: '/Interactive Chronological Visualizer',  
    src: '/line.gif',
    type: 'image',
    width: 100,
    height: 100
  },
  {
    href: 'sparks/widget',
    title: 'Widget',
    description: 'An interactive widget.',
    date: 'June - 2024',
    type: 'image',
    src: '/dots.gif',
    blurSrc: '/',  
    width: 100,
    height: 100
  },
];

const motionProps = {
  initial: {
    opacity: 0,
    top: "20px",
    position: "relative" as const,
  },
  animate: {
    opacity: 1,
    top: "0",
    position: "relative" as const,
  },
};

const Sparks: React.FC = () => {
  return (
    <>
      <Head>
        <title>Sparks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="keywords" content="HTML, CSS, JavaScript, product design, web3, nft" />
        <meta name="author" content="Mohamed Sadiq" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@mosadiq.com" />
        <meta name="twitter:title" content="Mohamed Sadiq" />
        <meta name="twitter:description" content="Product designer & Engineer." />
        <meta name="twitter:image" content="https://i.ibb.co/Cvc4f6R/Instagram-post-6.png" />
      </Head>
    
      <div className="container_sparks_home contentsSpark">
        <div className="inner_container inner_container_spark">
          <h1>Sparks</h1>
          <p>An engineering snippets</p>

          <div className='mItv1 mItv2'>
            <div className='ripi6'>
              {sparksData.map((spark, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, top: "20px", position: "relative" }}
                  animate={{ opacity: 1, top: "0", position: "relative" }}
                  transition={{ delay: index * 0.1 }}
                >
                  <SparkItem {...spark} />
                </motion.div>
              ))}
            </div>
            <div className='ripi6'>
              {sparksData2.map((spark, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, top: "20px", position: "relative" }}
                  animate={{ opacity: 1, top: "0", position: "relative" }}
                  transition={{ delay: index * 0.1 }}
                >
                  <SparkItem {...spark} />
                </motion.div>
              ))}
            </div>
            <div className='ripi6'>
              {sparksData3.map((spark, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, top: "20px", position: "relative" }}
                  animate={{ opacity: 1, top: "0", position: "relative" }}
                  transition={{ delay: index * 0.1 }}
                >
                  <SparkItem {...spark} />
                </motion.div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

const SparkItem: React.FC<SparkData> = ({ href, title, description, date, type, src, mediaType, blurSrc, width, height }) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [videoKey, setVideoKey] = useState(0);

  useEffect(() => {
    // Force video reload when src changes
    setVideoKey(prevKey => prevKey + 1);
  }, [src]);

  return (
    <Link href={href} passHref>
      <div className="spark_block">
        <div className={`media-container ${isLoaded ? 'loaded' : 'loading'}`}>
          {type === 'video' ? (
            <video 
              key={videoKey}
              width="100%" 
              height="100%" 
              autoPlay 
              loop 
              muted 
              playsInline
              onLoadedData={() => setIsLoaded(true)}
            >
              <source src={src.startsWith('http') ? src : `${process.env.NEXT_PUBLIC_BASE_PATH || ''}${src}`} type={mediaType} />
              Your browser does not support the video tag.
            </video>
          ) : (
            <Image
              alt={title}
              src={src}
              placeholder="blur"
              blurDataURL={blurSrc}
              width={width || 0}
              height={height || 0}
              layout="responsive"
              className='border-solid border-[#eaeaea] border'
              onLoadingComplete={() => setIsLoaded(true)}
            />
          )}
          <AnimatePresence>
            {!isLoaded && (
              <motion.div
                className="placeholder-blur"
                initial={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.5 }}
                style={{
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  backgroundColor: '#f0f0f0',
                }}
              >
                <motion.div
                  initial={{ filter: 'blur(10px)' }}
                  animate={{ filter: 'blur(5px)' }}
                  exit={{ filter: 'blur(0px)' }}
                  transition={{ duration: 0.5, repeat: Infinity, repeatType: 'reverse' }}
                  style={{
                    width: '100%',
                    height: '100%',
                    backgroundColor: '#e0e0e0',
                  }}
                />
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        <div className="spark_info">
          <div className='flex justify-between '>
            <div className="spark_title inline">{title}</div>
            <span className="text-stone-500 float-none text-xs self-center p-px bg-stone-100 pl-1.5 pr-1.5 rounded-full">{date}</span>
          </div>
          <div className="spark_dec mt-2.5">{description}</div>
        </div>
        <button className='bg-stone-50 blocl w-full rounded-3xl mb-0 text-stone-950 border-solid border p-2 text-sm m-0'> Discover</button>
      </div>
    </Link>
  );
};

export default Sparks;