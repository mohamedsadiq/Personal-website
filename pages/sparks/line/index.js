import React, { useState, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Head from 'next/head';
import BackButton from '../../../components/backButton';
import { useRouter } from 'next/router';
import Footer from '../../../components/sparksNav';


export default function Line() {
  const [startYear, setStartYear] = useState(1990);
  const [endYear, setEndYear] = useState(2024);
  const [years, setYears] = useState(Array.from({ length: endYear - startYear + 1 }, (_, i) => endYear - i));
  const [hoveredIndex, setHoveredIndex] = useState(null);
  const [selected, setSelected] = useState(null);
  const [dragging, setDragging] = useState(false);
  const router = useRouter();

  useEffect(() => {
    setYears(Array.from({ length: endYear - startYear + 1 }, (_, i) => endYear - i));
  }, [startYear, endYear]);

  const handleMouseEnter = useCallback((index) => setHoveredIndex(index), []);
  const handleMouseLeave = useCallback(() => setHoveredIndex(null), []);
  const handleClick = useCallback((index) => setSelected(index), []);

  const handleDecreaseClick = useCallback(() => {
    setSelected((prevSelected) => (prevSelected === null ? null : Math.max(prevSelected - 1, 0)));
  }, []);

  const handleIncreaseClick = useCallback(() => {
    setSelected((prevSelected) => (prevSelected === null ? null : Math.min(prevSelected + 1, years.length - 1)));
  }, [years.length]);

  const handleDragStart = useCallback(() => setDragging(true), []);
  const handleDragEnd = useCallback(() => setDragging(false), []);

  const calculateScale = useCallback((index) => {
    if (hoveredIndex === null) return 0.8;
    const distance = Math.abs(index - hoveredIndex);
    return Math.max(1 - distance * 0.2, 0.4);
  }, [hoveredIndex]);

  return (
    <>
      <Head>
        <title>Temporal Flow</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="keywords" content="HTML, CSS, JavaScript, product design, web3, nft" />
        <meta name="author" content="Mohamed Sadiq" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@mosadiq.com" />
        <meta name="twitter:title" content="Mohamed Sadiq" />
        <meta name="twitter:description" content="Product designer & Engineer." />
        <meta name="twitter:image" content="https://i.ibb.co/Cvc4f6R/Instagram-post-6.png" />
      </Head>
     
        <div className="container inner_container_sparks_parent">
          <BackButton title="" />
          <div className="inner_container inner_container_sparks">
            
               
          <h2 className="mt-10 mb-0 text-xl font-semibold inline">Temporal Flow</h2>
          <span className="text-xs text-stone-500  "> - Jul 2024</span>
            <p>
              In this snippet, I have been working on enhancing the user experience of a dynamic timeline component built with <span className="spark_tools">React</span> and <div  className="spark_tools">Framer Motion</div>. My main focus has been on implementing interactive elements and animations to create a more engaging interface.
            </p>
            <div className="exp" style={{ height: "400px", display: "flex", justifyContent: "center", alignItems: "center", flexDirection: "column" }}>
             
              <div className="flex w-full items-center justify-center mt-4">
                <ControlButton onClick={handleDecreaseClick} dragging={dragging} text="-" />
                
                <div className="flex flex-row gap-x-0.5" style={{ cursor: 'pointer' }}>
                  <AnimatePresence initial={false}>
                    {years.map((year, i) => (
                      <YearButton
                        key={year}
                        year={year}
                        index={i}
                        isSelected={selected === i}
                        isHovered={hoveredIndex === i}
                        handleMouseEnter={handleMouseEnter}
                        handleMouseLeave={handleMouseLeave}
                        handleClick={handleClick}
                        calculateScale={calculateScale}
                      />
                    ))}
                  </AnimatePresence>
                </div>
                
                <ControlButton onClick={handleIncreaseClick} dragging={dragging} text="+" />
              </div>
          
            </div>
            <Footer currentPath={router.pathname} />
            {/* <div className="year-inputs flex gap-x-4 mt-5">
              <motion.label
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                  style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
                >
                  Start Year
                  <motion.input
                    type="number"
                    value={startYear}
                    onChange={(e) => setStartYear(Number(e.target.value))}
                    min="1900"
                    max="2100"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    style={{ padding: '10px', borderRadius: '20px', border: '1px solid #ccc', marginTop: '5px' }}
                  />
                </motion.label>
                <motion.label
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                  style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
                >
                  End Year
                  <motion.input
                    type="number"
                    value={endYear}
                    onChange={(e) => setEndYear(Number(e.target.value))}
                    min="1900"
                    max="2100"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.3 }}
                    style={{ padding: '10px', borderRadius: '20px', border: '1px solid #ccc', marginTop: '5px' }}
                  />
                </motion.label>
              </div> */}
          </div>
        </div>
    
     
    </>
  );
}

const ControlButton = ({ onClick, dragging, text }) => (
  <motion.div
    className="control-button"
    style={{ cursor: 'pointer', margin: '10px' }}
    onClick={onClick}
    whileHover={{ scale: 0.8 }}
    whileTap={{ scale: 0.5 }}
    transition={{ type: 'spring', stiffness: 400, damping: 10 }}
  >
    <motion.div
      className="control-icon"
      style={{ cursor: 'pointer', width: '30px', height: '30px', backgroundColor: 'transparent', borderRadius: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#ddd', border: "1px solid #ddd" }}
      animate={{ scale: dragging ? 1.2 : 1 }}
      whileHover={{ color: '#000', border: "1px solid #000" }}
      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
    >
      {text}
    </motion.div>
  </motion.div>
);

const YearButton = ({ year, index, isSelected, isHovered, handleMouseEnter, handleMouseLeave, handleClick, calculateScale }) => (
  <motion.button
    className="relative inline-flex items-end justify-center py-1"
    onMouseEnter={() => handleMouseEnter(index)}
    onMouseLeave={handleMouseLeave}
    onClick={() => handleClick(index)}
    onTouchStart={() => handleMouseEnter(index)}
    onTouchEnd={handleMouseLeave}
    style={{ cursor: 'pointer' }}
    initial={{ scale: 0.8 }}
    animate={{ scale: isSelected ? 1.2 : calculateScale(index) }}
    exit={{ opacity: 0, scale: 0.8 }}
    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
  >
    <motion.div
      className={`w-0.5 h-20 rounded-[4px] ${isSelected ? 'bg-gray-500' : 'bg-black'}`}
      initial={{ scale: 0.4 }}
      animate={{ scale: calculateScale(index) }}
      exit={{ opacity: 0, scale: 0.4 }}
      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
    />
    {isHovered && (
      <motion.span
        className={`absolute -bottom-5 -left-3 text-[11px] ${isSelected ? 'text-gray-500' : 'text-black'}`}
        initial={{ opacity: 0, filter: 'blur(4px)', scale: 0.4 }}
        animate={{ opacity: 1, filter: 'blur(0px)', scale: 1 }}
        exit={{ opacity: 0, filter: 'blur(4px)', scale: 0.4 }}
        transition={{ duration: 0, delay: 0.01 }}
      >
        {year}
      </motion.span>
    )}
  </motion.button>
);
