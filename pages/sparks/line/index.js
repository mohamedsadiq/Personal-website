import React, { useState } from 'react';
import { motion } from 'framer-motion';
import Head from 'next/head';
import Script from 'next/script';
import BackButton from '../../../components/backButton';

const years = Array.from({ length: 2024 - 1950 + 1 }, (_, i) => 2024 - i);

export default function Timeline() {
  const [hoveredIndex, setHoveredIndex] = useState(null);
  const [selected, setSelected] = useState(null); // Set default to null
  const [dragging, setDragging] = useState(false);

  const handleMouseEnter = (index) => setHoveredIndex(index);
  const handleMouseLeave = () => setHoveredIndex(null);
  const handleClick = (index) => setSelected(index);

  const handleDecreaseClick = () => {
    setSelected((prevSelected) => {
      if (prevSelected === null) return null; // No change if nothing is selected
      return Math.max(prevSelected - 1, 0);
    });
  };

  const handleIncreaseClick = () => {
    setSelected((prevSelected) => {
      if (prevSelected === null) return null; // No change if nothing is selected
      return Math.min(prevSelected + 1, years.length - 1);
    });
  };

  const handleDragStart = () => setDragging(true);
  const handleDragEnd = () => setDragging(false);

  const calculateScale = (index) => {
    if (hoveredIndex === null) return 0.8;
    const distance = Math.abs(index - hoveredIndex);
    return Math.max(1 - distance * 0.2, 0.4);
  };

  return (
    <>
      <Head>
        <title>On Hover</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="keywords" content="HTML, CSS, JavaScript, product design, web3, nft" />
        <meta name="author" content="Mohamed Sadiq" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@mosadiq.com" />
        <meta name="twitter:title" content="Mohamed Sadiq" />
        <meta name="twitter:description" content="Product designer & Engineer." />
        <meta name="twitter:image" content="https://i.ibb.co/Cvc4f6R/Instagram-post-6.png" />
      </Head>
      <main>
        <div className="container inner_container_sparks_parent">
          <BackButton title="" />
          <div className="inner_container inner_container_sparks">
            <h2>On Hover</h2>
            <p>
              This demo showcases a series of dynamically animated buttons built with <span className="spark_tools">React</span> and <span className="spark_tools">Framer Motion</span>.
            </p>
            <div className="exp" style={{ height: "400px", display: "flex", justifyContent: "center", alignItems: "center" }}>
              <div className="flex w-full items-center justify-center">
                {/* Decrease Button */}
                <motion.div
                  className="control-button"
                  style={{ cursor: 'pointer', margin: '10px' }}
                  onClick={handleDecreaseClick}
                  whileHover={{ scale: 0.8 }}
                  whileTap={{ scale: 0.5 }}
                  transition={{ type: 'spring', stiffness: 400, damping: 10 }}
                >
                  <motion.div
                  
                    className="control-icon"
                    style={{  cursor: 'pointer', width: '30px', height: '30px', backgroundColor: 'white', borderRadius: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#ddd', border:"1px solid #ddd" }}
                    whileHover={{  color: '#000', border:"1px solid #000" }}
                    animate={{ scale: dragging ? 1.2 : 1 }}
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                  >
                    -
                  </motion.div>
                </motion.div>
                
                <div className="flex flex-row gap-x-0.5"  style={{ cursor: 'pointer' }}>
                  {years.map((year, i) => {
                    const isSelected = selected === i;
                    const isHovered = hoveredIndex === i;

                    return (
                      <motion.button
                        key={year}
                        className="relative inline-flex items-end justify-center py-1"
                        onMouseEnter={() => handleMouseEnter(i)}
                        onMouseLeave={handleMouseLeave}
                        onClick={() => handleClick(i)}
                        onTouchStart={() => handleMouseEnter(i)}
                        onTouchEnd={handleMouseLeave}
                        style={{ cursor: 'pointer' }}
                        initial={{ scale: 0.8 }}
                        animate={{ scale: isSelected ? 1.2 : calculateScale(i) }}
                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                      >
                        <motion.div
                          className={`w-0.5 h-20 rounded-[4px] ${isSelected ? 'bg-gray-500' : 'bg-black'}`}
                          initial={{ scale: 0.4 }}
                          animate={{ scale: calculateScale(i) }}
                          transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                        />
                        {isHovered && (
                          <motion.span
                            className={`absolute -bottom-5 -left-3 text-[11px] ${isSelected ? 'text-gray-500' : 'text-black'}`}
                            initial={{ opacity: 0, filter: 'blur(4px)', scale: 0.4 }}
                            animate={{ opacity: 1, filter: 'blur(0px)', scale: 1 }}
                            transition={{ duration: 0, delay: 0.01 }}
                          >
                            {year}
                          </motion.span>
                        )}
                      </motion.button>
                    );
                  })}
                 </div>
                

                {/* Increase Button */}
                <motion.div
                  className="control-button"
                  style={{ cursor: 'pointer', margin: '10px' }}
                  onClick={handleIncreaseClick}
                  whileHover={{ scale: 0.8 }}
                  whileTap={{ scale: 0.5 }}
                  transition={{ type: 'spring', stiffness: 400, damping: 10 }}
                >
                  <motion.div
                    className="control-icon"
                    style={{  cursor: 'pointer', width: '30px', height: '30px', backgroundColor: 'white', borderRadius: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#ddd', border:"1px solid #ddd" }}
                    animate={{ scale: dragging ? 1.2 : 1 }}
                    whileHover={{  color: '#000', border:"1px solid #000" }}
                    transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                  >
                    +
                  </motion.div>
                </motion.div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Script src="https://www.googletagmanager.com/gtag/js?id=G-H699TZ29QW" strategy="afterInteractive" />
      <Script id="google-analytics" strategy="afterInteractive">
        {`
          window.dataLayer = window.dataLayer || [];
          function gtag() { dataLayer.push(arguments); }
          gtag('js', new Date());
          gtag('config', 'G-H699TZ29QW');
        `}
      </Script>
    </>
  );
}
