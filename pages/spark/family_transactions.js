import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import Script from "next/script";
import useSound from "use-sound";
import { motion } from "framer-motion";
// Heavy Colors
// green : #00c78e
// blue : #00b2ff

// light color
// green : #d4f5e5
// blue : #e0f4ff
import { gsap } from "gsap";
import { useGSAP } from "@gsap/react";
import { useRef } from "react";

export default function Family_transactions() {
  const [play] = useSound("/sound.mp3");
  const [playref] = useSound("../button.mp3");

  const animationRef = useRef(null);
  

  useGSAP(() => {
    const timeline = gsap.timeline({ repeat: -1 });
  
    timeline
      .to(".transactions_box", { width: 250, background: "#e0f4ff", duration: 2, ease: "elastic.out(1, 0.3)", onUpdate: () => updateColors(0.7, 0.7, 0.7, 0.7, 0.1) })
      .to(".transactions_box", { width: 250, background: "#e0f4ff", duration: 3, ease: "none" }, "-=0.5")
      .to(".transactions_box", { width: 200, background: "#d4f5e5", duration: 2, ease: "elastic.out(1, 0.3)", onUpdate: () => updateColors(0.7, 0.7, 0.7, 0.7, 0.1) })
      .to(".transactions_box", { width: 200, background: "#d4f5e5", duration: 2, ease: "none" }, "-=0.5");
      animationRef.current = timeline;

    function updateColors(analyzingOpacityDurationBefore, analyzingOpacityDurationAfter, safeOpacityDurationBefore, safeOpacityDurationAfter, iconOpacityDuration) {
      const backgroundColor = gsap.getProperty(".transactions_box", "background-color");
      let textColor;
      let analyzingOpacity;
      let safeOpacity;
      let analyzingX;
      let safeX;
      let textTransactionsX;
      let safeIconsOpacity;
      let transactionsIconsOpacity;
  
      // Set the text color, opacity, and x position based on the background color
      if (backgroundColor === "rgb(224, 244, 255)") {
        textColor = "#00b2ff";
        analyzingOpacity = 1;
        safeOpacity = 0;
        analyzingX = 0;
        safeX = 50;
        textTransactionsX = 10;
        safeIconsOpacity = 0;
        transactionsIconsOpacity = 1;
      } else if (backgroundColor === "rgb(212, 245, 229)") {
        textColor = "#00c78e";
        analyzingOpacity = 0;
        safeOpacity = 1;
        analyzingX = -50;
        safeX = 0;
        textTransactionsX = -68;
        safeIconsOpacity = 1;
        transactionsIconsOpacity = 0;
      }
  
      // Update the text color of the spans with a spring effect
      gsap.to(".text_transactions span", { color: textColor, duration: 0.2, ease: "elastic.out(1, 17)" });
      // Update the opacity of the spans with a spring effect
      gsap.to(".analyzing", { opacity: analyzingOpacity, duration: analyzingX === 0 ? analyzingOpacityDurationBefore : analyzingOpacityDurationAfter, ease: "elastic.out(1, 17)" });
      gsap.to(".safe", { opacity: safeOpacity, duration: safeX === 0 ? safeOpacityDurationBefore : safeOpacityDurationAfter, ease: "elastic.out(1, 17)" });
      // Update the x position of "Analyzing" and "Safe" with a spring effect
      gsap.to(".analyzing", { x: analyzingX, duration: 0.2, ease: "elastic.out(1, 17)" });
      gsap.to(".safe", { x: safeX, duration: 0.2, ease: "elastic.out(1, 17)" });
      // Update the x position of "text_transactions" with a spring effect
      gsap.to(".text_transactions", { x: textTransactionsX, duration: 0.1 === 0 ? analyzingOpacityDurationBefore : analyzingOpacityDurationAfter, ease: "elastic.out(1, 17)" });
      // Update the opacity of icons with a spring effect
      gsap.to(".safe_icons", { opacity: safeIconsOpacity, duration: iconOpacityDuration, ease: "elastic.out(1, 17)" });
      gsap.to(".transactions_icons", { opacity: transactionsIconsOpacity, duration: iconOpacityDuration, ease: "elastic.out(1, 17)" });
    }
    return () => {
      timeline.kill();
    };
  }, {})
  
  

  
  const playAnimation = () => {
    animationRef.current.play();
  };

  const pauseAnimation = () => {
    animationRef.current.pause();
  };

  const reverseAnimation = () => {
    animationRef.current.reverse();
  };

  const restartAnimation = () => {
    animationRef.current.restart();
  };

  return (
    <>
      <Head>
        <title>Family Wallet Transactions</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="container">
          <div className="inner_container ">
            <h2>Family Wallet Transactions</h2>
            <p> I really like how smooth the animations are in Family Wallet Transactions, so I tried making something similar using GSAP.
</p>

            <div className="exp">
              <div className="transactions_box">
                <div className="transactions_container">
                <div className="icon_transactions">
                  <div className="safe_icons">
                  <svg width="20" height="20" viewBox="0 0 92 92" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="46" cy="46" r="46" fill="#00C78E"/>
                  <path d="M68.2312 29.2531L66.4604 27.4824C65.3285 26.3519 63.7942 25.7169 62.1945 25.7169C60.5947 25.7169 59.0604 26.3519 57.9285 27.4824L38.1816 47.189L33.1913 42.1583C32.0594 41.0279 30.5251 40.3929 28.9253 40.3929C27.3256 40.3929 25.7912 41.0279 24.6593 42.1583L22.8886 43.9492C22.3278 44.5098 21.883 45.1754 21.5795 45.9079C21.276 46.6405 21.1198 47.4256 21.1198 48.2186C21.1198 49.0115 21.276 49.7966 21.5795 50.5292C21.883 51.2617 22.3278 51.9273 22.8886 52.4879L33.9425 63.5418C35.0744 64.6723 36.6087 65.3073 38.2085 65.3073C39.8082 65.3073 41.3425 64.6723 42.4744 63.5418L68.2312 37.7918C68.792 37.2312 69.2368 36.5656 69.5403 35.8331C69.8438 35.1005 70 34.3154 70 33.5224C70 32.7295 69.8438 31.9444 69.5403 31.2118C69.2368 30.4793 68.792 29.8137 68.2312 29.2531Z" fill="white"/>
                  </svg>
                  </div>
                  <div className="transactions_icons">
                  <svg width="20" height="20" viewBox="0 0 92 92" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M45.9999 78.0833C63.7191 78.0833 78.0833 63.7192 78.0833 46C78.0833 28.2809 63.7191 13.9167 45.9999 13.9167C28.2808 13.9167 13.9166 28.2809 13.9166 46C13.9166 63.7192 28.2808 78.0833 45.9999 78.0833ZM45.9999 91.8333C71.3128 91.8333 91.8333 71.3128 91.8333 46C91.8333 20.6869 71.3128 0.166656 45.9999 0.166656C20.6869 0.166656 0.166626 20.6869 0.166626 46C0.166626 71.3128 20.6869 91.8333 45.9999 91.8333Z" fill="#9ED5F4"/>
                  <path d="M0.166626 46C0.166626 20.6869 20.6869 0.166656 45.9999 0.166656V13.9167C28.2808 13.9167 13.9166 28.2809 13.9166 46H0.166626Z" fill="#00B2FF"/>
                  </svg>
                  </div>
                </div>
                <div className="transactions_parent">
                <div className="text_transactions">
                  <span className="analyzing">Analyzing </span>
                  <span className="transactions"> Transactions </span>
                  <span className="safe">Safe</span>
                </div>
                </div>
                </div>
              </div>
            </div>
            <div className="controll_button">
            <button className="button_play" onClick={playAnimation}>Play</button>
            <button   className="button_pause" onClick={pauseAnimation}>Pause</button>
            <button  className="button_restart" onClick={restartAnimation}>Restart</button>
            </div>
          </div>
        </div>
        <Script
          src="https://www.googletagmanager.com/gtag/js?id=G-H699TZ29QW"
          strategy="afterInteractive"
        />
        <Script id="google-analytics" strategy="afterInteractive">
          {`
         window.dataLayer = window.dataLayer || [];
         function gtag(){dataLayer.push(arguments);}
         gtag('js', new Date());
 
         gtag('config', 'G-H699TZ29QW');
        `}
        </Script>
      </main>
    </>
  );
}
